
const Dropdown = ({ options, onOptionSelect, category }) => {
  const [optionsVisible, setOptionsVisible] = useState(false);
  const [selectedOption, setSelectedOption] = useState('Seleccionar Opción');

  const toggleOptions = () => {
    setOptionsVisible(!optionsVisible);
  };

  const selectOption = (option) => {
    setSelectedOption(option);
    onOptionSelect(option);
    setOptionsVisible(false);
  };

  return (
    <div className="dropdown-container">
      <h1>{category}:</h1>
      <button onClick={toggleOptions} className = "dropdown-dos-selection">
        {selectedOption}
      </button>
      {optionsVisible && (
        <div className="options-container">
          {options.map((option, index) => (
            <div
              key={index}
              className="option"
              onClick={() => selectOption(option)}
            >
              {option}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

Dropdown.propTypes = {
  options: PropTypes.arrayOf(PropTypes.string).isRequired,
  onOptionSelect: PropTypes.func.isRequired,
  category: PropTypes.string.isRequired,
};

const DropdownElemento = () => {
  const [selectedAnimales, setSelectedAnimales] = useState('Seleccionar Opción');
  const [selectedColores, setSelectedColores] = useState('Seleccionar Opción');
  const [selectedLugares, setSelectedLugares] = useState('Seleccionar Opción');
  const [resultVisible, setResultVisible] = useState(false);
  const [reiniciarVisible, setReiniciarVisible] = useState(false);
  const [toastVisible, setToastVisible] = useState(false);
  const [toastContent, setToastContent] = useState('');

  const handleAnimalesSelect = (option) => {
    setSelectedAnimales(option);
    checkTerminarButton();
  };

  const handleColoresSelect = (option) => {
    setSelectedColores(option);
    checkTerminarButton();
  };

  const handleLugaresSelect = (option) => {
    setSelectedLugares(option);
    checkTerminarButton();
  };

  const checkTerminarButton = () => {
    if (
      selectedAnimales !== 'Seleccionar Opción' &&
      selectedColores !== 'Seleccionar Opción' &&
      selectedLugares !== 'Seleccionar Opción'
    ) {
      setResultVisible(true);
      setReiniciarVisible(true);
    } else {
      setResultVisible(false);
      setReiniciarVisible(false);
    }
  };

  const handleTerminarClick = () => {
    const campoFaltante = getCampoFaltante();
    if (campoFaltante === '') {
      setToastContent(
        `Usted ha elegido el animal: ${selectedAnimales}, color: ${selectedColores} y lugar: ${selectedLugares}`
      );
    } else {
      setToastContent(`Falta completar el campo correspondiente: ${campoFaltante}`);
    }
    setToastVisible(true);
  };
  const handleCloseToast = () => {
    setToastVisible(false);
  };

  const getCampoFaltante = () => {
    if (selectedAnimales === 'Seleccionar Opción') {
      return 'Animal';
    } else if (selectedColores === 'Seleccionar Opción') {
      return 'Color';
    } else if (selectedLugares === 'Seleccionar Opción') {
      return 'Lugar';
    }
    return '';
  };

  const handleReiniciarClick = () => {
    setSelectedAnimales('Seleccionar Opción');
    setSelectedColores('Seleccionar Opción');
    setSelectedLugares('Seleccionar Opción');
    setResultVisible(false);
    setReiniciarVisible(false);
    setToastVisible(false);
  };

  return (
    <section className='dropdown-conteiner-master'>
      <h1 className='dropdown-title'>Dropdown en formulario</h1>
      <div className="dropdown-element">
        <Dropdown
          className="Dropdown-selection"
          options={['Seleccionar Opción', 'Perro', 'Gato', 'Gorrión', 'Pez', 'Lagartija']}
          onOptionSelect={handleAnimalesSelect}
          category="Animal"
        />
        <Dropdown
          options={['Seleccionar Opción', 'Azul', 'Rojo', 'Rosa', 'Verde', 'Marrón']}
          onOptionSelect={handleColoresSelect}
          category="Color"
        />
        <Dropdown
          options={['Seleccionar Opción', 'Lagos', 'Llanuras', 'Desiertos', 'Montañas', 'Bosque']}
          onOptionSelect={handleLugaresSelect}
          category="Lugar"
        />
        <button
          onClick={handleTerminarClick}
          className="terminate-button"
        >
        Terminar
        </button>
        <div className="toast-container">
        {toastVisible && (
          <div className="toast-dropdown">
            <div className="toast-content">
              <h1>{toastContent}</h1>
              {resultVisible ? (
                <button onClick={handleReiniciarClick} className="toast-button">
                  Reiniciar
                </button>
              ) : (
                <button onClick={handleCloseToast} className="toast-button">
                  Volver
                </button>
              )}
            </div>
          </div>
        )}
        </div>
      </div>
    </section>
  );
};